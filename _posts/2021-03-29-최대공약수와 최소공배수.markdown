---
layout: post
title: 최대공약수와 최소공배수
image: 프로그래머스.jpg
date: 2021-03-29 14:30:20 +0200
tags:
categories: programmers-level1
---
<center>https://programmers.co.kr/learn/courses/30/lessons/12940</center>

***


**< 문제 설명 >**  
두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

  

**< 제한사항 >**  

* 두 수는 1이상 1000000이하의 자연수입니다.
 <br>  



**< 입출력 예 >**  

|n|m|return|
|:---:|:---:|:---:|
|3|12|[ 3,12 ]|
|2|5|[ 1,10 ]|


<br>

**< 입출력 예 설명 >**  
* 자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.




  

*** 




{% highlight java %}
import java.util.*;
class Solution {
    public static ArrayList<Integer> solution(int x, int y) {
        ArrayList<Integer> list=new ArrayList<Integer>();
        int X=x;
        int Y=y;
        while(y!=0)
        {
        	if(x<y)
        	{
        		int temp=0;
        		temp=x;
        		x=y;
        		y=temp;
        	}
        	int R=x%y;
        	x=y;
        	y=R;
        }
        list.add(x);
        list.add((X*Y)/x);
        return list;
    }    
}
{% endhighlight %}

***


**< 유클리드 호제법 >**  
크기가 큰 두 수가 있을 때 최대 공약수를 빠르게 구하기 위해서 사용한다.

 

유클리드 호제법은 A를 B로 나눈 나머지가 C일 때, (A와 B의 최대 공약수) = (B와 C의 최대 공약수)라는 사실을 이용해서 처음에 구하려고 했던 숫자의 크기를 점점 줄여 간단하게 만든 다음 최대 공약수를 구하는 방법이다.

 

예를 들어, 48과 21의 최대 공약수를 구해본다면.

48/21 ••• 6

21/6  ••• 3

6/3  ••• 0

최대 공약수는 3이 된다.

최소공배수는 (A*B)/최대공약수



